import "dotenv/config";
import express from "express";
import TelegramBot from "node-telegram-bot-api";
import { mainKb } from "./keyboards";
import { guardUser, isExpired, isMuted } from "./guards";
import { ensureUser } from "./storage";
import { startOnboarding, isOnboarding, handleOnboardingAnswer } from "./onboarding/runner";
import { registerFood, registerFoodCallbacks } from "./features/food";
import { registerReports } from "./features/reports";
import { registerPlan } from "./features/plan";
import { createUserJobs } from "./scheduler";
import { initDB } from "./storage";

const token = process.env.BOT_TOKEN!;
const base = process.env.WEBHOOK_URL!; // –Ω–∞–ø—Ä–∏–º–µ—Ä: https://tg-fitness-bot-app-production.up.railway.app
const port = Number(process.env.PORT || 8080);

if (!token || !base) {
  throw new Error("BOT_TOKEN –∏–ª–∏ WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
}

const app = express();
app.use(express.json({ limit: "2mb" })); // JSON-–ø–∞—Ä—Å–µ—Ä –î–û–õ–ñ–ï–ù –±—ã—Ç—å –≤–∫–ª—é—á—ë–Ω

// 1) –ë–û–¢ –≤ —Ä–µ–∂–∏–º–µ WEBHOOK (–ë–ï–ó polling!)
const bot = new TelegramBot(token, { webHook: { autoOpen: false } });

// 2) –°–µ–∫—Ä–µ—Ç–Ω—ã–π –ø—É—Ç—å –≤–µ–±—Ö—É–∫–∞ (–≤–∫–ª—é—á–∞–µ—Ç —Ç–æ–∫–µ–Ω)
const hookPath = `/bot${token}`;
const hookUrl  = `${base}${hookPath}`;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function startBot() {
  try {
    await initDB();
    console.log("Database initialized successfully");

    // —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ–∏—á–∏
    registerFood(bot);
    registerFoodCallbacks(bot);
    registerReports(bot);
    registerPlan(bot);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    bot.onText(/^\/start$/, async (msg) => {
      const u = await guardUser(msg.chat.id, msg.from);
      if (!u.plan_status) { // –Ω–µ—Ç –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞/–ø–ª–∞–Ω–∞ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º
        startOnboarding(bot, msg.chat.id);
      } else {
        await bot.sendMessage(msg.chat.id, `–ü—Ä–∏–≤–µ—Ç, ${u.preferred_name || u.first_name}!`, { reply_markup: mainKb });
      }
      // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å–æ–∑–¥–∞–¥–∏–º –¥–∂–æ–±—ã (–µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –±—É–¥–µ—Ç)
      createUserJobs(bot, msg.chat.id);
    });

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–ª–∞–Ω–∞ –∏ –∑–∞–ø—É—Å–∫–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
    bot.onText(/^\/clear$/, async (msg) => {
      const u = await guardUser(msg.chat.id, msg.from);
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–ª–∞–Ω
      await ensureUser(msg.chat.id, { 
        plan_status: null, 
        plan_start: null, 
        plan_end: null, 
        plan: undefined 
      });
      await bot.sendMessage(msg.chat.id, "–ü–ª–∞–Ω —Å–±—Ä–æ—à–µ–Ω! –ù–∞—á–∏–Ω–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥...");
      startOnboarding(bot, msg.chat.id);
    });

    // —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π Guard (–∞–≤—Ç–æ–±–ª–æ–∫ –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –º–µ—Å—è—Ü–∞)
    bot.on("message", async (msg) => {
      if (/^\/start$/.test(msg.text || "")) return;          // —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏
      if (/^\/clear$/.test(msg.text || "")) return;          // —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏
      if (isOnboarding(msg.chat.id)) { await handleOnboardingAnswer(bot, msg); return; }

      const u = await guardUser(msg.chat.id, msg.from);
      if (isMuted(u)) return; // –º–æ–ª—á–∏–º
      if (isExpired(u)) {
        return bot.sendMessage(msg.chat.id, "–ú–µ—Å—è—Ü –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å?", {
          reply_markup: { inline_keyboard: [[{ text: "–ü—Ä–æ–¥–ª–∏—Ç—å", url: "https://t.me/your_payment_link" }]] }
        });
      }
    });

    // 3) –ü—Ä–∏—ë–º –∞–ø–¥–µ–π—Ç–æ–≤: –æ—Ç–≤–µ—á–∞–µ–º 200 –ú–ì–ù–û–í–ï–ù–ù–û
    app.post(hookPath, (req, res) => {
      console.log('üì® –ü–æ–ª—É—á–µ–Ω webhook:', req.body);
      bot.processUpdate(req.body);
      res.sendStatus(200);
    });

    // 4) Health-check –Ω–∞ –∫–æ—Ä–Ω–µ ‚Äî —á—Ç–æ–±—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ –±—ã–ª–æ –ù–ï "Cannot GET /"
    app.get("/", (_req, res) => res.status(200).send("OK"));

    // 5) –°—Ç–∞—Ä—Ç
    app.listen(port, "0.0.0.0", async () => {
      // –°–Ω–∞—á–∞–ª–∞ —Å–Ω–∏–º–µ–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫ (–Ω–∞ —Å–ª—É—á–∞–π —Å–º–µ–Ω—ã –¥–æ–º–µ–Ω–∞/–ø—É—Ç–∏)
      await fetch(`https://api.telegram.org/bot${token}/deleteWebhook`, { method: "POST" });

      // –ü—Ä–∏–≤—è–∂–µ–º –Ω–æ–≤—ã–π
      await bot.setWebHook(hookUrl);

      console.log("Webhook set to:", hookUrl);
      console.log(`Server is listening on ${port} (WEBHOOK mode)`);
    });

  } catch (error) {
    console.error("Failed to start bot:", error);
    process.exit(1);
  }
}

startBot();
