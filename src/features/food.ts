import TelegramBot from "node-telegram-bot-api";
import { addFood, dayKeyOf, getFoodCountToday, getFoodSummaryToday, getFoodTotalsToday, getUser } from "../storage";
import { foodIKB } from "../keyboards";
import { foodFeedback } from "../gpt";

// –ü–∞—Ä—Å–∏–Ω–≥ –ë–ñ–£ –∏–∑ —Ç–µ–∫—Å—Ç–∞
function parseNutritionFromText(text: string): { kcal?: number; protein_g?: number; carbs_g?: number; fat_g?: number } {
  const result: { kcal?: number; protein_g?: number; carbs_g?: number; fat_g?: number } = {};
  
  // –ü–∞—Ä—Å–∏–º –∫–∞–ª–æ—Ä–∏–∏: 520 –∫–∫–∞–ª, 520–∫–∫–∞–ª, 520 –∫–∞–ª–æ—Ä–∏–π
  const kcalMatch = text.match(/(\d+)\s*(?:–∫–∫–∞–ª|–∫–∞–ª–æ—Ä–∏–π)/i);
  if (kcalMatch) result.kcal = parseInt(kcalMatch[1]);
  
  // –ü–∞—Ä—Å–∏–º –±–µ–ª–∫–∏: –ë18, –ë 18, –±–µ–ª–æ–∫ 18–≥, –±–µ–ª–æ–∫18
  const proteinMatch = text.match(/[–ë–±](?:–µ–ª–∫–∏?)?\s*(\d+)(?:–≥)?/);
  if (proteinMatch) result.protein_g = parseInt(proteinMatch[1]);
  
  // –ü–∞—Ä—Å–∏–º –∂–∏—Ä—ã: –ñ14, –ñ 14, –∂–∏—Ä—ã 14–≥, –∂–∏—Ä14
  const fatMatch = text.match(/[–ñ–∂](?:–∏—Ä—ã?)?\s*(\d+)(?:–≥)?/);
  if (fatMatch) result.fat_g = parseInt(fatMatch[1]);
  
  // –ü–∞—Ä—Å–∏–º —É–≥–ª–µ–≤–æ–¥—ã: –£72, –£ 72, —É–≥–ª–µ–≤–æ–¥—ã 72–≥, —É–≥–ª72
  const carbsMatch = text.match(/[–£—É](?:–≥–ª–µ–≤–æ–¥—ã?)?\s*(\d+)(?:–≥)?/);
  if (carbsMatch) result.carbs_g = parseInt(carbsMatch[1]);
  
  return result;
}

export function registerFood(bot:TelegramBot){
  bot.on("message", async (msg) => {
    if(!msg.text) return; if(msg.text !== "üçΩÔ∏è –ï–¥–∞") return;
    const u = await getUser(msg.chat.id);
    const FOOD_LIMIT = u?.plan?.meals_limit ?? 4;
    const tz = u?.tz || "Europe/Moscow";
    const key = dayKeyOf(Date.now(), tz);
    const used = await getFoodCountToday(msg.chat.id, key, tz);
    if(used>=FOOD_LIMIT){
      return bot.sendMessage(msg.chat.id, `–ù–∞ —Å–µ–≥–æ–¥–Ω—è –ª–∏–º–∏—Ç –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏ –∏—Å—á–µ—Ä–ø–∞–Ω (${FOOD_LIMIT}/${FOOD_LIMIT}).`, { reply_markup: foodIKB });
    }
    await bot.sendMessage(msg.chat.id, `–ü—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω(—ã) –µ–¥—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–º–æ–∂–Ω–æ –∞–ª—å–±–æ–º) + –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç. –û—Å—Ç–∞–ª–æ—Å—å: ${FOOD_LIMIT-used}/${FOOD_LIMIT}.`, { reply_markup: foodIKB });
    // –ø–æ–º–µ—Ç–∏–º, —á—Ç–æ –∂–¥—ë–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –µ–¥—É
    (bot as any)._expectFood = (bot as any)._expectFood || {};
    (bot as any)._expectFood[msg.chat.id] = true;
  });

  bot.on("photo", async (msg) => handleFoodPayload(bot, msg));
  bot.on("document", async (msg) => handleFoodPayload(bot, msg));
  bot.on("text", async (msg) => {
    // –µ—Å–ª–∏ –∂–¥—ë–º –µ–¥—É –∏ –ø—Ä–∏—à—ë–ª —Ç–µ–∫—Å—Ç ‚Äî —Ç–æ–∂–µ —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –∑–∞–ø–∏—Å—å —Å –∫–æ–º–º–µ–Ω—Ç–æ–º
    if((bot as any)._expectFood?.[msg.chat.id]) await handleFoodPayload(bot, msg);
  });
}

async function handleFoodPayload(bot:TelegramBot, msg:TelegramBot.Message){
  if(!(bot as any)._expectFood?.[msg.chat.id]) return;
  const u = await getUser(msg.chat.id);
  const FOOD_LIMIT = u?.plan?.meals_limit ?? 4;
  const tz = u?.tz || "Europe/Moscow";
  const key = dayKeyOf(Date.now(), tz);
  const used = await getFoodCountToday(msg.chat.id, key, tz);
  if(used>=FOOD_LIMIT){
    (bot as any)._expectFood[msg.chat.id] = false;
    return bot.sendMessage(msg.chat.id, `–õ–∏–º–∏—Ç ${FOOD_LIMIT}/–¥–µ–Ω—å. –ó–∞–≤—Ç—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∏–º üëå`);
  }

  const photos:string[] = [];
  if("photo" in msg && msg.photo?.length){ const v = msg.photo[msg.photo.length-1]; photos.push(v.file_id); }
  if("document" in msg && msg.document?.mime_type?.startsWith("image/")) photos.push(msg.document.file_id);
  const text = msg.caption || msg.text || "";

  // –ü–∞—Ä—Å–∏–º –ë–ñ–£ –∏–∑ —Ç–µ–∫—Å—Ç–∞
  const nutritionData = parseNutritionFromText(text);
  
  await addFood(msg.chat.id, { 
    ts: Date.now(), 
    photos, 
    text,
    ...nutritionData
  });
  (bot as any)._expectFood[msg.chat.id] = false;

  const fb = await foodFeedback({ user:u, note:text, photos });
  await bot.sendMessage(msg.chat.id, fb, { parse_mode:"HTML" });

  const left = FOOD_LIMIT - (used+1);
  await bot.sendMessage(msg.chat.id, `–ó–∞–ø–∏—Å–∞–ª –ø—Ä–∏—ë–º –ø–∏—â–∏. –û—Å—Ç–∞–ª–æ—Å—å: ${left}/${FOOD_LIMIT}.`);
}

// –ò—Ç–æ–≥–∏ –¥–Ω—è (inline –∫–Ω–æ–ø–∫–∞)
export function registerFoodCallbacks(bot:TelegramBot){
  bot.on("callback_query", async (q) => {
    if(!q.data) return;
    if(q.data==="food_add"){
      (bot as any)._expectFood = (bot as any)._expectFood || {};
      (bot as any)._expectFood[q.message!.chat.id] = true;
      await bot.answerCallbackQuery(q.id);
      await bot.sendMessage(q.message!.chat.id, "–ñ–¥—É —Å–∫—Ä–∏–Ω(—ã) –µ–¥—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ú–æ–∂–Ω–æ —Å –ø–æ–¥–ø–∏—Å—å—é.");
    }
    if(q.data==="food_summary"){
      const u = await getUser(q.message!.chat.id); 
      const tz = u?.tz || "Europe/Moscow";
      const key = dayKeyOf(Date.now(), tz);
      const planKcal = u?.plan?.daily_kcal ?? null;
      const t = await getFoodTotalsToday(q.message!.chat.id, key, tz);
      await bot.answerCallbackQuery(q.id);
      await bot.sendMessage(q.message!.chat.id,
        `–ò—Ç–æ–≥–∏: ${t.kcal|0} –∫–∫–∞–ª` + (planKcal ? ` / —Ü–µ–ª—å ${planKcal}`:"") +
        `\n–ë:${t.p|0}–≥ –ñ:${t.f|0}–≥ –£:${t.c|0}–≥`);
    }
  });
}
