import cron from "node-cron";
import dayjs from "dayjs"; import utc from "dayjs/plugin/utc"; import tzp from "dayjs/plugin/timezone";
import { db, getUser, ensureUser } from "./storage";
import TelegramBot from "node-telegram-bot-api";
dayjs.extend(utc); dayjs.extend(tzp);

function rand(min:number,max:number){ return Math.floor(Math.random()*(max-min+1))+min; }

export async function createUserJobs(bot:TelegramBot, chatId:number){
  const u = await getUser(chatId); if(!u || !u.tz) return;
  const tz = u.tz;

  // 1) –£—Ç—Ä–µ–Ω–Ω–∏–π –ø–∏–Ω–≥ (07:00‚Äì09:30, —Å–ª—É—á–∞–π–Ω–∞—è –º–∏–Ω—É—Ç–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å)
  cron.schedule("0 7 * * *", () => {
    setTimeout(()=> sendMorning(bot, chatId), rand(0, 150)*1000); // 0‚Äì150 —Å–µ–∫
  }, { timezone: tz });

  // 2) –í–æ–¥–Ω—ã–µ (3‚Äì5 –æ–∫–æ–Ω)
  const windows = ["10:30","12:30","15:00","17:00","19:00"];
  windows.forEach(t=>{
    const [h,m] = t.split(":").map(Number);
    cron.schedule(`${m} ${h} * * *`, () => {
      setTimeout(()=> sendWater(bot, chatId), rand(0,900)*1000); // –¥–æ 15 –º–∏–Ω –¥–∂–∏—Ç—Ç–µ—Ä
    }, { timezone: tz });
  });

  // 3) –°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏ (–æ–∫–Ω–æ –∏–∑ –ø–ª–∞–Ω–∞)
  const [from, to] = u?.plan?.goodnight_window ?? ["22:50","23:10"]; // "HH:mm"
  const [fh,fm] = from.split(":").map(Number);
  cron.schedule(`${fm} ${fh} * * *`, () => {
    // –¥–∂–∏—Ç—Ç–µ—Ä –¥–æ —Ä–∞–∑–Ω–∏—Ü—ã –º–µ–∂–¥—É from –∏ to
    const [th,tm] = to.split(":").map(Number);
    const windowSec = (th*60+tm - (fh*60+fm)) * 60;
    setTimeout(()=> sendGoodNight(bot, chatId), rand(0, Math.max(60, windowSec))*1000);
  }, { timezone: tz });

  // 4) –ö–æ–Ω—Ç—Ä–æ–ª—å –æ–∫–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ‚Äî –ø–æ-—Ö–æ—Ä–æ—à–µ–º—É –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è; MVP –ø—Ä–æ–ø—É—Å—Ç–∏–º,
  //   –Ω–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Å—Ç–∞–≤–∏–º:
  //   cron at T-30 ‚Üí –Ω–∞–ø–æ–º–Ω–∏—Ç—å; T+120 ‚Üí –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç—á—ë—Ç –∏ "–ø–Ω—É—Ç—å"
}

async function sendMorning(bot:TelegramBot, chatId:number){
  const u = await getUser(chatId); if(!u || mutedOrExpired(u)) return;
  const name = u.preferred_name || u.first_name || "–¥—Ä—É–≥";
  await bot.sendMessage(chatId, `–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, ${name}! –°–µ–≥–æ–¥–Ω—è —Ç—Ä–µ–Ω—è? –ì–ª—è–Ω—å –ø–ª–∞–Ω üëá`, { reply_markup:{ inline_keyboard: [[{text:"üìÖ –û—Ç–∫—Ä—ã—Ç—å –ø–ª–∞–Ω", callback_data:"open_plan"}]] }});
}
async function sendWater(bot:TelegramBot, chatId:number){
  const u = await getUser(chatId); if(!u || mutedOrExpired(u)) return;
  const goal = u?.plan?.water_goal_ml ?? 2300;
  const current = u?.water_today || 0;
  const left = Math.max(0, goal - current);
  await bot.sendMessage(chatId, `–í–æ–¥–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: +250 –º–ª? (${current}/${goal} –º–ª, –æ—Å—Ç–∞–ª–æ—Å—å ~${left} –º–ª)`, { disable_notification: true, reply_markup:{ inline_keyboard: [[{text:"+250 –º–ª", callback_data:"water_250"}, {text:"+500 –º–ª", callback_data:"water_500"}]] }});
}
async function sendGoodNight(bot:TelegramBot, chatId:number){
  const u = await getUser(chatId); if(!u || mutedOrExpired(u)) return;
  const lines = [
    "23:00 ‚Äî –≤—Ä–µ–º—è –ø—Ä–∏–∑–Ω–∞—Ç—å, —á—Ç–æ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ –ø–æ–±–µ–¥–∏–ª —Ç–µ–±—è‚Ä¶ –°–ø–∞—Ç—å! üòà",
    "–°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –∫—ç–ø: –º—ã—à—Ü—ã —Ä–∞—Å—Ç—É—Ç –≤–æ —Å–Ω–µ, –∞ –Ω–µ –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ. –û—Ç–±–æ–π.",
    "–ó–∞–≤—Ç—Ä–∞ —Å—Ç–∞–Ω–µ—à—å —Å–∏–ª—å–Ω–µ–µ. –ê —Å–µ–π—á–∞—Å ‚Äî üõå. –ù–µ —Å–ø–æ—Ä—å.",
  ];
  await bot.sendMessage(chatId, lines[Math.floor(Math.random()*lines.length)]);
}

function mutedOrExpired(u:any){
  const muted = u.mute_until && Date.now()<u.mute_until;
  const expired = (u.plan_status==="expired") || (u.plan_end && Date.now()>u.plan_end);
  return muted || expired;
}
